//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LURecCenter.DAL.DataRepo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LURecCenterEntities : DbContext
    {
        public LURecCenterEntities()
            : base("name=LURecCenterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblEquipment> tblEquipments { get; set; }
        public virtual DbSet<TblIssuedEquipment> TblIssuedEquipments { get; set; }
        public virtual DbSet<TblLoggedInUser> TblLoggedInUsers { get; set; }
        public virtual DbSet<tblMasterUserRole> tblMasterUserRoles { get; set; }
        public virtual DbSet<tblMstrDepartment> tblMstrDepartments { get; set; }
        public virtual DbSet<tblMstrEquipmentType> tblMstrEquipmentTypes { get; set; }
        public virtual DbSet<TblmstrUserType> TblmstrUserTypes { get; set; }
        public virtual DbSet<TblPerson> TblPersons { get; set; }
        public virtual DbSet<TblShift> TblShifts { get; set; }
        public virtual DbSet<TblUser> TblUsers { get; set; }
        public virtual DbSet<TblWritesUp> TblWritesUps { get; set; }
    
        public virtual ObjectResult<SpGetIssuedequipment_Result> SpGetIssuedequipment(ObjectParameter message, ObjectParameter messageCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIssuedequipment_Result>("SpGetIssuedequipment", message, messageCode);
        }
    
        public virtual int SpInsertUser(string firstname, string lastname, Nullable<System.DateTime> dateofbirth, string userName, string password, string address, string pincode, string phone, string emailid, Nullable<int> roleID, string idNumber, ObjectParameter message, ObjectParameter messageCode)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var dateofbirthParameter = dateofbirth.HasValue ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var idNumberParameter = idNumber != null ?
                new ObjectParameter("IdNumber", idNumber) :
                new ObjectParameter("IdNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertUser", firstnameParameter, lastnameParameter, dateofbirthParameter, userNameParameter, passwordParameter, addressParameter, pincodeParameter, phoneParameter, emailidParameter, roleIDParameter, idNumberParameter, message, messageCode);
        }
    }
}
